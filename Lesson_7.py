# -*- coding: utf-8 -*-
"""Копия 2.3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckpt4Wdw_gzuF8bpy46rIZ-2QijoOxzY
"""

import matplotlib.pyplot as plt
import numpy as np

print('Задание 1.')

# Даны значения величины заработной платы заемщиков банка (zp) и значения их
# поведенческого кредитного скоринга (ks):
zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110]
ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]
# Используя математические операции, посчитать коэффициенты линейной регрессии,
# приняв за X заработную плату (то есть, zp - признак), а за y - значения
# скорингового балла (то есть, ks - целевая переменная). Произвести расчет как с
# использованием intercept, так и без.

Mzp = np.mean(zp)

Mks = np.mean(ks)

Dzp = (np.std(zp)) ** 2

mult = ([x * y for x, y in zip(zp, ks)])

m = sum(mult) / 10

b = (m - (Mzp * Mks)) / Dzp

a = Mks - b * Mzp

print(f'Коэффициент ковариации с интерсептом, вычисленный вручную: {a:.2f}+{b:.2f}*x')

X = np.reshape(zp, (10, 1))
Y = np.reshape(ks, (10, 1))

print('Коэффициент ковариации без интерсепта, функция NumPy:', np.dot(np.linalg.inv(np.dot(X.T,X)), X.T @ Y))

x = np.linspace(0, 250)
y = a + b * x
plt.scatter(zp, ks)
plt.plot(x, y)
plt.xlabel('Заработная плата заемщиков, тыс. руб')
plt.ylabel('Поведенческий кредитный скоринг, баллы')
plt.show()

import math

print('Задание 2.')

# Посчитать коэффициент линейной регрессии при заработной плате (zp), используя
# градиентный спуск (без intercept).

zp = ([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = ([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

def mse(zp=zp, ks=ks, n=10):
  return np.sum([((0.1 * x - y) ** 2) / n for x, y in zip(zp, ks)])

alpha = 1 * math.e - 6

n = 10

B = 0.1

for i in range(10000):
  B -= ([(alpha * (2 / n) * sum((B * x - y) * x)) for x, y in zip(zp, ks)])
  if i % 5000 == 0:
    print(f'Iteration: {i}, B = {B}, mse = {mse}'.format(i = i, B = B, mse = mse(B)))